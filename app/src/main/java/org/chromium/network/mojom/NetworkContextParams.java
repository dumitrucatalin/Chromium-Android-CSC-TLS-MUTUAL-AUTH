
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/interfaces/network_service.mojom
//

package org.chromium.network.mojom;

import org.chromium.mojo.bindings.DeserializationException;


public final class NetworkContextParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 96;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(96, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public String contextName;
    public boolean enableBrotli;
    public String quicUserAgentId;
    public org.chromium.proxy_resolver.mojom.ProxyResolverFactory proxyResolverFactory;
    public org.chromium.mojo.common.mojom.FilePath cookiePath;
    public boolean restoreOldSessionCookies;
    public boolean persistSessionCookies;
    public org.chromium.mojo.common.mojom.FilePath channelIdPath;
    public boolean httpCacheEnabled;
    public int httpCacheMaxSize;
    public org.chromium.mojo.common.mojom.FilePath httpCachePath;
    public org.chromium.mojo.common.mojom.FilePath httpServerPropertiesPath;
    public boolean enableDataUrlSupport;
    public boolean enableFileUrlSupport;
    public boolean enableFtpUrlSupport;
    public boolean http09OnNonDefaultPortsEnabled;
    public ProxyConfig initialProxyConfig;
    public org.chromium.mojo.bindings.InterfaceRequest<ProxyConfigClient> proxyConfigClientRequest;
    public ProxyConfigPollerClient proxyConfigPollerClient;

    private NetworkContextParams(int version) {
        super(STRUCT_SIZE, version);
        this.enableBrotli = (boolean) true;
        this.restoreOldSessionCookies = (boolean) false;
        this.persistSessionCookies = (boolean) false;
        this.httpCacheEnabled = (boolean) true;
        this.httpCacheMaxSize = (int) 0L;
        this.enableDataUrlSupport = (boolean) false;
        this.enableFileUrlSupport = (boolean) false;
        this.enableFtpUrlSupport = (boolean) false;
        this.http09OnNonDefaultPortsEnabled = (boolean) false;
    }

    public NetworkContextParams() {
        this(0);
    }

    public static NetworkContextParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkContextParams deserialize(java.nio.ByteBuffer data) {
        if (data == null)
            return null;

        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkContextParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        NetworkContextParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            result = new NetworkContextParams(mainDataHeader.elementsOrVersion);
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.contextName = decoder0.readString(8, true);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableBrotli = decoder0.readBoolean(16, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.restoreOldSessionCookies = decoder0.readBoolean(16, 1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.persistSessionCookies = decoder0.readBoolean(16, 2);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.httpCacheEnabled = decoder0.readBoolean(16, 3);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableDataUrlSupport = decoder0.readBoolean(16, 4);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableFileUrlSupport = decoder0.readBoolean(16, 5);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableFtpUrlSupport = decoder0.readBoolean(16, 6);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.http09OnNonDefaultPortsEnabled = decoder0.readBoolean(16, 7);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.httpCacheMaxSize = decoder0.readInt(20);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.quicUserAgentId = decoder0.readString(24, false);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.proxyResolverFactory = decoder0.readServiceInterface(32, true, org.chromium.proxy_resolver.mojom.ProxyResolverFactory.MANAGER);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                result.cookiePath = org.chromium.mojo.common.mojom.FilePath.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, true);
                result.channelIdPath = org.chromium.mojo.common.mojom.FilePath.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, true);
                result.httpCachePath = org.chromium.mojo.common.mojom.FilePath.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, true);
                result.httpServerPropertiesPath = org.chromium.mojo.common.mojom.FilePath.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, true);
                result.initialProxyConfig = ProxyConfig.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.proxyConfigClientRequest = decoder0.readInterfaceRequest(80, true);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.proxyConfigPollerClient = decoder0.readServiceInterface(84, true, ProxyConfigPollerClient.MANAGER);
            }
        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.contextName, 8, true);
        
        encoder0.encode(this.enableBrotli, 16, 0);
        
        encoder0.encode(this.restoreOldSessionCookies, 16, 1);
        
        encoder0.encode(this.persistSessionCookies, 16, 2);
        
        encoder0.encode(this.httpCacheEnabled, 16, 3);
        
        encoder0.encode(this.enableDataUrlSupport, 16, 4);
        
        encoder0.encode(this.enableFileUrlSupport, 16, 5);
        
        encoder0.encode(this.enableFtpUrlSupport, 16, 6);
        
        encoder0.encode(this.http09OnNonDefaultPortsEnabled, 16, 7);
        
        encoder0.encode(this.httpCacheMaxSize, 20);
        
        encoder0.encode(this.quicUserAgentId, 24, false);
        
        encoder0.encode(this.proxyResolverFactory, 32, true, org.chromium.proxy_resolver.mojom.ProxyResolverFactory.MANAGER);
        
        encoder0.encode(this.cookiePath, 40, true);
        
        encoder0.encode(this.channelIdPath, 48, true);
        
        encoder0.encode(this.httpCachePath, 56, true);
        
        encoder0.encode(this.httpServerPropertiesPath, 64, true);
        
        encoder0.encode(this.initialProxyConfig, 72, true);
        
        encoder0.encode(this.proxyConfigClientRequest, 80, true);
        
        encoder0.encode(this.proxyConfigPollerClient, 84, true, ProxyConfigPollerClient.MANAGER);
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        NetworkContextParams other = (NetworkContextParams) object;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.contextName, other.contextName))
            return false;
        if (this.enableBrotli!= other.enableBrotli)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.quicUserAgentId, other.quicUserAgentId))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.proxyResolverFactory, other.proxyResolverFactory))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.cookiePath, other.cookiePath))
            return false;
        if (this.restoreOldSessionCookies!= other.restoreOldSessionCookies)
            return false;
        if (this.persistSessionCookies!= other.persistSessionCookies)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.channelIdPath, other.channelIdPath))
            return false;
        if (this.httpCacheEnabled!= other.httpCacheEnabled)
            return false;
        if (this.httpCacheMaxSize!= other.httpCacheMaxSize)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.httpCachePath, other.httpCachePath))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.httpServerPropertiesPath, other.httpServerPropertiesPath))
            return false;
        if (this.enableDataUrlSupport!= other.enableDataUrlSupport)
            return false;
        if (this.enableFileUrlSupport!= other.enableFileUrlSupport)
            return false;
        if (this.enableFtpUrlSupport!= other.enableFtpUrlSupport)
            return false;
        if (this.http09OnNonDefaultPortsEnabled!= other.http09OnNonDefaultPortsEnabled)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.initialProxyConfig, other.initialProxyConfig))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.proxyConfigClientRequest, other.proxyConfigClientRequest))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.proxyConfigPollerClient, other.proxyConfigPollerClient))
            return false;
        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.contextName);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.enableBrotli);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.quicUserAgentId);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.proxyResolverFactory);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.cookiePath);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.restoreOldSessionCookies);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.persistSessionCookies);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.channelIdPath);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.httpCacheEnabled);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.httpCacheMaxSize);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.httpCachePath);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.httpServerPropertiesPath);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.enableDataUrlSupport);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.enableFileUrlSupport);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.enableFtpUrlSupport);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.http09OnNonDefaultPortsEnabled);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.initialProxyConfig);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.proxyConfigClientRequest);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.proxyConfigPollerClient);
        return result;
    }
}