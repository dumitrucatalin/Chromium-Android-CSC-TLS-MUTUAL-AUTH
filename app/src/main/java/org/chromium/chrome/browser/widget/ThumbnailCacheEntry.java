// Generated by the protocol buffer compiler.  DO NOT EDIT!

package org.chromium.chrome.browser.widget;

// @@protoc_insertion_point(imports_scope)

@SuppressWarnings("hiding")
public interface ThumbnailCacheEntry {

  public static final class ContentId extends
      com.google.protobuf.nano.ExtendableMessageNano<ContentId> {

    private static volatile ContentId[] _emptyArray;
    public static ContentId[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ContentId[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string id = 1;
    public java.lang.String id;

    // @@protoc_insertion_point(class_scope:org.chromium.chrome.browser.widget.ContentId)

    public ContentId() {
      clear();
    }

    public ContentId clear() {
      id = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.id != null) {
        output.writeString(1, this.id);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.id != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.id);
      }
      return size;
    }

    @Override
    public ContentId mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.id = input.readString();
            break;
          }
        }
      }
    }

    public static ContentId parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ContentId(), data);
    }

    public static ContentId parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ContentId().mergeFrom(input);
    }
  }

  public static final class ThumbnailEntry extends
      com.google.protobuf.nano.ExtendableMessageNano<ThumbnailEntry> {

    private static volatile ThumbnailEntry[] _emptyArray;
    public static ThumbnailEntry[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ThumbnailEntry[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .org.chromium.chrome.browser.widget.ContentId content_id = 1;
    public org.chromium.chrome.browser.widget.ThumbnailCacheEntry.ContentId contentId;

    // optional int32 size_px = 2;
    public java.lang.Integer sizePx;

    // optional bytes compressed_png = 3;
    public byte[] compressedPng;

    // @@protoc_insertion_point(class_scope:org.chromium.chrome.browser.widget.ThumbnailEntry)

    public ThumbnailEntry() {
      clear();
    }

    public ThumbnailEntry clear() {
      contentId = null;
      sizePx = null;
      compressedPng = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.contentId != null) {
        output.writeMessage(1, this.contentId);
      }
      if (this.sizePx != null) {
        output.writeInt32(2, this.sizePx);
      }
      if (this.compressedPng != null) {
        output.writeBytes(3, this.compressedPng);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.contentId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.contentId);
      }
      if (this.sizePx != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.sizePx);
      }
      if (this.compressedPng != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(3, this.compressedPng);
      }
      return size;
    }

    @Override
    public ThumbnailEntry mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.contentId == null) {
              this.contentId = new org.chromium.chrome.browser.widget.ThumbnailCacheEntry.ContentId();
            }
            input.readMessage(this.contentId);
            break;
          }
          case 16: {
            this.sizePx = input.readInt32();
            break;
          }
          case 26: {
            this.compressedPng = input.readBytes();
            break;
          }
        }
      }
    }

    public static ThumbnailEntry parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ThumbnailEntry(), data);
    }

    public static ThumbnailEntry parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ThumbnailEntry().mergeFrom(input);
    }
  }
}
