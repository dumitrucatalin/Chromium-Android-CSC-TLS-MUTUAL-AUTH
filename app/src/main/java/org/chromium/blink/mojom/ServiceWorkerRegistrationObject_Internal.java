
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/WebKit/common/service_worker/service_worker_registration.mojom
//

package org.chromium.blink.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class ServiceWorkerRegistrationObject_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<ServiceWorkerRegistrationObject, ServiceWorkerRegistrationObject.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<ServiceWorkerRegistrationObject, ServiceWorkerRegistrationObject.Proxy>() {
    
        @Override
        public String getName() {
            return "blink::mojom::ServiceWorkerRegistrationObject";
        }
    
        @Override
        public int getVersion() {
          return 0;
        }
    
        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, ServiceWorkerRegistrationObject impl) {
            return new Stub(core, impl);
        }
    
        @Override
        public ServiceWorkerRegistrationObject[] buildArray(int size) {
          return new ServiceWorkerRegistrationObject[size];
        }
    };


    private static final int SET_VERSION_ATTRIBUTES_ORDINAL = 0;

    private static final int UPDATE_FOUND_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements ServiceWorkerRegistrationObject.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setVersionAttributes(
int changedMask, ServiceWorkerObjectInfo installing, ServiceWorkerObjectInfo waiting, ServiceWorkerObjectInfo active) {

            ServiceWorkerRegistrationObjectSetVersionAttributesParams _message = new ServiceWorkerRegistrationObjectSetVersionAttributesParams();

            _message.changedMask = changedMask;

            _message.installing = installing;

            _message.waiting = waiting;

            _message.active = active;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_VERSION_ATTRIBUTES_ORDINAL)));

        }


        @Override
        public void updateFound(
) {

            ServiceWorkerRegistrationObjectUpdateFoundParams _message = new ServiceWorkerRegistrationObjectUpdateFoundParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_FOUND_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<ServiceWorkerRegistrationObject> {

        Stub(org.chromium.mojo.system.Core core, ServiceWorkerRegistrationObject impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                ServiceWorkerRegistrationObject_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
                    case SET_VERSION_ATTRIBUTES_ORDINAL: {
            
                        ServiceWorkerRegistrationObjectSetVersionAttributesParams data =
                                ServiceWorkerRegistrationObjectSetVersionAttributesParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().setVersionAttributes(data.changedMask, data.installing, data.waiting, data.active);
                        return true;
                    }
            
            
            
            
            
                    case UPDATE_FOUND_ORDINAL: {
            
                        ServiceWorkerRegistrationObjectUpdateFoundParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().updateFound();
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), ServiceWorkerRegistrationObject_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class ServiceWorkerRegistrationObjectSetVersionAttributesParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int changedMask;
        public ServiceWorkerObjectInfo installing;
        public ServiceWorkerObjectInfo waiting;
        public ServiceWorkerObjectInfo active;
    
        private ServiceWorkerRegistrationObjectSetVersionAttributesParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public ServiceWorkerRegistrationObjectSetVersionAttributesParams() {
            this(0);
        }
    
        public static ServiceWorkerRegistrationObjectSetVersionAttributesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static ServiceWorkerRegistrationObjectSetVersionAttributesParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static ServiceWorkerRegistrationObjectSetVersionAttributesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            ServiceWorkerRegistrationObjectSetVersionAttributesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new ServiceWorkerRegistrationObjectSetVersionAttributesParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.changedMask = decoder0.readInt(8);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.installing = ServiceWorkerObjectInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.waiting = ServiceWorkerObjectInfo.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.active = ServiceWorkerObjectInfo.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.changedMask, 8);
            
            encoder0.encode(this.installing, 16, true);
            
            encoder0.encode(this.waiting, 24, true);
            
            encoder0.encode(this.active, 32, true);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            ServiceWorkerRegistrationObjectSetVersionAttributesParams other = (ServiceWorkerRegistrationObjectSetVersionAttributesParams) object;
            if (this.changedMask!= other.changedMask)
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.installing, other.installing))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.waiting, other.waiting))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.active, other.active))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.changedMask);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.installing);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.waiting);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.active);
            return result;
        }
    }



    
    static final class ServiceWorkerRegistrationObjectUpdateFoundParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
        private ServiceWorkerRegistrationObjectUpdateFoundParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public ServiceWorkerRegistrationObjectUpdateFoundParams() {
            this(0);
        }
    
        public static ServiceWorkerRegistrationObjectUpdateFoundParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static ServiceWorkerRegistrationObjectUpdateFoundParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static ServiceWorkerRegistrationObjectUpdateFoundParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            ServiceWorkerRegistrationObjectUpdateFoundParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new ServiceWorkerRegistrationObjectUpdateFoundParams(mainDataHeader.elementsOrVersion);
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            return result;
        }
    }



}
