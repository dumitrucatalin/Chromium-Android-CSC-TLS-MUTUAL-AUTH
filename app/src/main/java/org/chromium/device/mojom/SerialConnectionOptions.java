
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/device/public/interfaces/serial.mojom
//

package org.chromium.device.mojom;

import org.chromium.mojo.bindings.DeserializationException;


public final class SerialConnectionOptions extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 32;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public int bitrate;
    public int dataBits;
    public int parityBit;
    public int stopBits;
    public boolean ctsFlowControl;
    public boolean hasCtsFlowControl;

    private SerialConnectionOptions(int version) {
        super(STRUCT_SIZE, version);
        this.bitrate = (int) 0L;
        this.dataBits = (int) SerialDataBits.NONE;
        this.parityBit = (int) SerialParityBit.NONE;
        this.stopBits = (int) SerialStopBits.NONE;
        this.hasCtsFlowControl = (boolean) false;
    }

    public SerialConnectionOptions() {
        this(0);
    }

    public static SerialConnectionOptions deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static SerialConnectionOptions deserialize(java.nio.ByteBuffer data) {
        if (data == null)
            return null;

        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static SerialConnectionOptions decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        SerialConnectionOptions result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            result = new SerialConnectionOptions(mainDataHeader.elementsOrVersion);
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.bitrate = decoder0.readInt(8);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.dataBits = decoder0.readInt(12);
                    SerialDataBits.validate(result.dataBits);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.parityBit = decoder0.readInt(16);
                    SerialParityBit.validate(result.parityBit);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.stopBits = decoder0.readInt(20);
                    SerialStopBits.validate(result.stopBits);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.ctsFlowControl = decoder0.readBoolean(24, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.hasCtsFlowControl = decoder0.readBoolean(24, 1);
            }
        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.bitrate, 8);
        
        encoder0.encode(this.dataBits, 12);
        
        encoder0.encode(this.parityBit, 16);
        
        encoder0.encode(this.stopBits, 20);
        
        encoder0.encode(this.ctsFlowControl, 24, 0);
        
        encoder0.encode(this.hasCtsFlowControl, 24, 1);
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        SerialConnectionOptions other = (SerialConnectionOptions) object;
        if (this.bitrate!= other.bitrate)
            return false;
        if (this.dataBits!= other.dataBits)
            return false;
        if (this.parityBit!= other.parityBit)
            return false;
        if (this.stopBits!= other.stopBits)
            return false;
        if (this.ctsFlowControl!= other.ctsFlowControl)
            return false;
        if (this.hasCtsFlowControl!= other.hasCtsFlowControl)
            return false;
        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.bitrate);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.dataBits);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.parityBit);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.stopBits);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.ctsFlowControl);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.hasCtsFlowControl);
        return result;
    }
}