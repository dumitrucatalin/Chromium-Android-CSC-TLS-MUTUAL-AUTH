
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/device/public/interfaces/hid.mojom
//

package org.chromium.device.mojom;

import org.chromium.mojo.bindings.DeserializationException;


public final class HidDeviceInfo extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 96;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(96, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public String guid;
    public short vendorId;
    public short productId;
    public String productName;
    public String serialNumber;
    public int busType;
    public byte[] reportDescriptor;
    public HidCollectionInfo[] collections;
    public boolean hasReportId;
    public long maxInputReportSize;
    public long maxOutputReportSize;
    public long maxFeatureReportSize;
    public String deviceNode;

    private HidDeviceInfo(int version) {
        super(STRUCT_SIZE, version);
    }

    public HidDeviceInfo() {
        this(0);
    }

    public static HidDeviceInfo deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static HidDeviceInfo deserialize(java.nio.ByteBuffer data) {
        if (data == null)
            return null;

        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static HidDeviceInfo decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        HidDeviceInfo result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            result = new HidDeviceInfo(mainDataHeader.elementsOrVersion);
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.guid = decoder0.readString(8, false);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.vendorId = decoder0.readShort(16);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.productId = decoder0.readShort(18);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.busType = decoder0.readInt(20);
                    HidBusType.validate(result.busType);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.productName = decoder0.readString(24, false);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.serialNumber = decoder0.readString(32, false);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.reportDescriptor = decoder0.readBytes(40, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.collections = new HidCollectionInfo[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.collections[i1] = HidCollectionInfo.decode(decoder2);
                    }
                }
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.hasReportId = decoder0.readBoolean(56, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.maxInputReportSize = decoder0.readLong(64);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.maxOutputReportSize = decoder0.readLong(72);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.maxFeatureReportSize = decoder0.readLong(80);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.deviceNode = decoder0.readString(88, false);
            }
        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.guid, 8, false);
        
        encoder0.encode(this.vendorId, 16);
        
        encoder0.encode(this.productId, 18);
        
        encoder0.encode(this.busType, 20);
        
        encoder0.encode(this.productName, 24, false);
        
        encoder0.encode(this.serialNumber, 32, false);
        
        encoder0.encode(this.reportDescriptor, 40, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        if (this.collections == null) {
            encoder0.encodeNullPointer(48, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.collections.length, 48, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.collections.length; ++i0) {
                
                encoder1.encode(this.collections[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.hasReportId, 56, 0);
        
        encoder0.encode(this.maxInputReportSize, 64);
        
        encoder0.encode(this.maxOutputReportSize, 72);
        
        encoder0.encode(this.maxFeatureReportSize, 80);
        
        encoder0.encode(this.deviceNode, 88, false);
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        HidDeviceInfo other = (HidDeviceInfo) object;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.guid, other.guid))
            return false;
        if (this.vendorId!= other.vendorId)
            return false;
        if (this.productId!= other.productId)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.productName, other.productName))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.serialNumber, other.serialNumber))
            return false;
        if (this.busType!= other.busType)
            return false;
        if (!java.util.Arrays.equals(this.reportDescriptor, other.reportDescriptor))
            return false;
        if (!java.util.Arrays.deepEquals(this.collections, other.collections))
            return false;
        if (this.hasReportId!= other.hasReportId)
            return false;
        if (this.maxInputReportSize!= other.maxInputReportSize)
            return false;
        if (this.maxOutputReportSize!= other.maxOutputReportSize)
            return false;
        if (this.maxFeatureReportSize!= other.maxFeatureReportSize)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.deviceNode, other.deviceNode))
            return false;
        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.guid);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.vendorId);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.productId);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.productName);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.serialNumber);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.busType);
        result = prime * result + java.util.Arrays.hashCode(this.reportDescriptor);
        result = prime * result + java.util.Arrays.deepHashCode(this.collections);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.hasReportId);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.maxInputReportSize);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.maxOutputReportSize);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.maxFeatureReportSize);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.deviceNode);
        return result;
    }
}