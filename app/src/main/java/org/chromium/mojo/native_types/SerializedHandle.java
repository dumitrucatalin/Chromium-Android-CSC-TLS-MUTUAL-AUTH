
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/bindings/native_struct.mojom
//

package org.chromium.mojo.native_types;

import org.chromium.mojo.bindings.DeserializationException;


public final class SerializedHandle extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

    public static final class Type {
    
    
        public static final int MOJO_HANDLE = 0;
    
        public static final int PLATFORM_FILE = MOJO_HANDLE + 1;
    
        public static final int WIN_HANDLE = PLATFORM_FILE + 1;
    
        public static final int MACH_PORT = WIN_HANDLE + 1;
    
        public static final int FUCHSIA_HANDLE = MACH_PORT + 1;
    
    
        private static final boolean IS_EXTENSIBLE = false;
    
        public static boolean isKnownValue(int value) {
            switch (value) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    return true;
            }
            return false;
        }
    
        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value))
                return;
    
            throw new DeserializationException("Invalid enum value.");
        }
    
        private Type() {}
    
    }
    public org.chromium.mojo.system.UntypedHandle theHandle;
    public int type;

    private SerializedHandle(int version) {
        super(STRUCT_SIZE, version);
        this.theHandle = org.chromium.mojo.system.InvalidHandle.INSTANCE;
    }

    public SerializedHandle() {
        this(0);
    }

    public static SerializedHandle deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static SerializedHandle deserialize(java.nio.ByteBuffer data) {
        if (data == null)
            return null;

        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static SerializedHandle decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        SerializedHandle result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            result = new SerializedHandle(mainDataHeader.elementsOrVersion);
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.theHandle = decoder0.readUntypedHandle(8, false);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.type = decoder0.readInt(12);
                    SerializedHandle.Type.validate(result.type);
            }
        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.theHandle, 8, false);
        
        encoder0.encode(this.type, 12);
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        SerializedHandle other = (SerializedHandle) object;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.theHandle, other.theHandle))
            return false;
        if (this.type!= other.type)
            return false;
        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.theHandle);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.type);
        return result;
    }
}