
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/interfaces/media_types.mojom
//

package org.chromium.media.mojom;

import org.chromium.mojo.bindings.DeserializationException;


public final class VideoDecoderConfig extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 88;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(88, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public int codec;
    public int profile;
    public int format;
    public int colorSpace;
    public int videoRotation;
    public org.chromium.gfx.mojom.Size codedSize;
    public org.chromium.gfx.mojom.Rect visibleRect;
    public org.chromium.gfx.mojom.Size naturalSize;
    public byte[] extraData;
    public EncryptionScheme encryptionScheme;
    public VideoColorSpace colorSpaceInfo;
    public HdrMetadata hdrMetadata;

    private VideoDecoderConfig(int version) {
        super(STRUCT_SIZE, version);
    }

    public VideoDecoderConfig() {
        this(0);
    }

    public static VideoDecoderConfig deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static VideoDecoderConfig deserialize(java.nio.ByteBuffer data) {
        if (data == null)
            return null;

        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static VideoDecoderConfig decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        VideoDecoderConfig result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            result = new VideoDecoderConfig(mainDataHeader.elementsOrVersion);
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.codec = decoder0.readInt(8);
                    VideoCodec.validate(result.codec);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.profile = decoder0.readInt(12);
                    VideoCodecProfile.validate(result.profile);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.format = decoder0.readInt(16);
                    VideoPixelFormat.validate(result.format);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.colorSpace = decoder0.readInt(20);
                    ColorSpace.validate(result.colorSpace);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.videoRotation = decoder0.readInt(24);
                    VideoRotation.validate(result.videoRotation);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.codedSize = org.chromium.gfx.mojom.Size.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                result.visibleRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                result.naturalSize = org.chromium.gfx.mojom.Size.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.extraData = decoder0.readBytes(56, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                result.encryptionScheme = EncryptionScheme.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                result.colorSpaceInfo = VideoColorSpace.decode(decoder1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, true);
                result.hdrMetadata = HdrMetadata.decode(decoder1);
            }
        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.codec, 8);
        
        encoder0.encode(this.profile, 12);
        
        encoder0.encode(this.format, 16);
        
        encoder0.encode(this.colorSpace, 20);
        
        encoder0.encode(this.videoRotation, 24);
        
        encoder0.encode(this.codedSize, 32, false);
        
        encoder0.encode(this.visibleRect, 40, false);
        
        encoder0.encode(this.naturalSize, 48, false);
        
        encoder0.encode(this.extraData, 56, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.encryptionScheme, 64, false);
        
        encoder0.encode(this.colorSpaceInfo, 72, false);
        
        encoder0.encode(this.hdrMetadata, 80, true);
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        VideoDecoderConfig other = (VideoDecoderConfig) object;
        if (this.codec!= other.codec)
            return false;
        if (this.profile!= other.profile)
            return false;
        if (this.format!= other.format)
            return false;
        if (this.colorSpace!= other.colorSpace)
            return false;
        if (this.videoRotation!= other.videoRotation)
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.codedSize, other.codedSize))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.visibleRect, other.visibleRect))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.naturalSize, other.naturalSize))
            return false;
        if (!java.util.Arrays.equals(this.extraData, other.extraData))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.encryptionScheme, other.encryptionScheme))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.colorSpaceInfo, other.colorSpaceInfo))
            return false;
        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.hdrMetadata, other.hdrMetadata))
            return false;
        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.codec);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.profile);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.format);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.colorSpace);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.videoRotation);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.codedSize);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.visibleRect);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.naturalSize);
        result = prime * result + java.util.Arrays.hashCode(this.extraData);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.encryptionScheme);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.colorSpaceInfo);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.hdrMetadata);
        return result;
    }
}